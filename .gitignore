#include <LiquidCrystal.h>      // using the LiquidCrystal library

const int rs = 8, en = 9, d4 = 4, d5 = 5, d6 = 6, d7 = 7; // definition of Display pins
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);                // configuring the pins
const int Signal = 12;
int PinTrigger = 2; // Pin used to trigger sensor pulses
int PinEcho = 3; // pin used to read sensor output
float TempoEcho = 0;
const float VelocidadeSom_mpors = 340; // in meters per second
const float VelocidadeSom_mporus = 0.000340; // in meters per microsecond

unsigned long previousMillis = 0; // Store the last time the main loop was executed
const long interval = 2000; // Interval in milliseconds

void setup()
{
  lcd.begin(16, 2);               // defining the LCD - 16 columns and 2 rows
  // Configure Trigger pin as output and initialize with low level
  pinMode(Signal, OUTPUT);
  digitalWrite(Signal, LOW);
  pinMode(PinTrigger, OUTPUT);
  digitalWrite(PinTrigger, LOW);
  pinMode(PinEcho, INPUT); // configure ECHO pin as input
  // Initialize serial port
  Serial.begin(9600);
  delay(100);
}

void Hello ()                     // printing message
{
  // Function body
}

void loop()
{
  unsigned long currentMillis = millis(); // Get the current time
  
  // Check if it's time to execute the main loop
  if (currentMillis - previousMillis >= interval) {
    // Update the last time the main loop was executed
    previousMillis = currentMillis;
    
    // Send pulse to trigger the sensor
    DisparaPulsoUltrassonico();
    // Measure the duration time of the signal at the read pin(us)
    TempoEcho = pulseIn(PinEcho, HIGH);
    float distancia_metros = CalculaDistancia(TempoEcho);
    
    Serial.println("Distancia em metros: ");
    Serial.println(distancia_metros);
    Serial.println("Distancia em centimetros: ");
    Serial.println(distancia_metros * 100);
  
    // Calculate percentage
    float porcentagem = (distancia_metros / 3.36) * 100;
  
    // Print on LCD
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Reservatorio:");
    lcd.setCursor(0, 1);
    lcd.setCursor(10, 1);
    lcd.print(porcentagem);
    lcd.print("%");
  
   
    Hello ();         // printing message
 
      // Control signal based on percentage
    if (porcentagem < 50) {
      digitalWrite(Signal, HIGH);
    } else {
      digitalWrite(Signal, LOW);
    }
    
    
  }
}

// Function to send ultrasonic pulse
void DisparaPulsoUltrassonico(){
  // To make the HC-SR04 send an ultrasonic pulse, we need
  // to send a high level signal to the trigger pin
  // with at least 10us duration
  digitalWrite(PinTrigger, HIGH);
  delayMicroseconds(10);
  digitalWrite(PinTrigger, LOW);
}

// Function to calculate distance in meters
float CalculaDistancia(float tempo_us){
  return((tempo_us * VelocidadeSom_mporus) / 2);
}
